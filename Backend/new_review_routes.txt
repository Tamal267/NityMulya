// NEW REVIEW API ROUTES FOR UPDATED DATABASE STRUCTURE
// Add these routes to your index.ts file

// ====================================
// PRODUCT REVIEW ROUTES
// ====================================

// Get all product reviews for a specific product (subcat_id)
// GET /reviews/product/:subcatId?shopOwnerId=optional
app.get("/reviews/product/:subcatId", reviewController.getProductReviews.bind(reviewController));

// Get average rating for a product
// GET /reviews/product/:subcatId/average?shopOwnerId=optional
app.get("/reviews/product/:subcatId/average", async (c) => {
  try {
    const subcatId = c.req.param('subcatId');
    const shopOwnerId = c.req.query('shopOwnerId');
    
    const averageData = await memoryDb.getProductAverageRating(subcatId, shopOwnerId);
    
    return c.json({
      success: true,
      average: averageData.average,
      count: averageData.count
    });
  } catch (error) {
    return c.json({ success: false, error: 'Failed to get average rating' }, 500);
  }
});

// Create a new product review (protected route)
// POST /reviews/product/create
app.use("/reviews/product/create", createAuthMiddleware(), requireRole("customer"));
app.post("/reviews/product/create", reviewController.createProductReview.bind(reviewController));

// Update a product review (protected route)
// PUT /reviews/product/:reviewId
app.use("/reviews/product/:reviewId", createAuthMiddleware(), requireRole("customer"));
app.put("/reviews/product/:reviewId", reviewController.updateProductReview.bind(reviewController));

// Delete a product review (protected route)
// DELETE /reviews/product/:reviewId
app.delete("/reviews/product/:reviewId", reviewController.deleteProductReview.bind(reviewController));

// ====================================
// SHOP REVIEW ROUTES
// ====================================

// Get all shop reviews for a specific shop
// GET /reviews/shop/:shopOwnerId
app.get("/reviews/shop/:shopOwnerId", reviewController.getShopReviews.bind(reviewController));

// Get average ratings for a shop
// GET /reviews/shop/:shopOwnerId/average
app.get("/reviews/shop/:shopOwnerId/average", async (c) => {
  try {
    const shopOwnerId = c.req.param('shopOwnerId');
    
    const averageData = await memoryDb.getShopAverageRatings(shopOwnerId);
    
    return c.json({
      success: true,
      overall: averageData.overall,
      service: averageData.service,
      delivery: averageData.delivery,
      count: averageData.count
    });
  } catch (error) {
    return c.json({ success: false, error: 'Failed to get shop average ratings' }, 500);
  }
});

// Create a new shop review (protected route)
// POST /reviews/shop/create
app.use("/reviews/shop/create", createAuthMiddleware(), requireRole("customer"));
app.post("/reviews/shop/create", reviewController.createShopReview.bind(reviewController));

// Update a shop review (protected route)
// PUT /reviews/shop/:reviewId
app.put("/reviews/shop/:reviewId", reviewController.updateShopReview.bind(reviewController));

// Delete a shop review (protected route)
// DELETE /reviews/shop/:reviewId
app.delete("/reviews/shop/:reviewId", reviewController.deleteShopReview.bind(reviewController));

// ====================================
// CUSTOMER REVIEW ROUTES
// ====================================

// Get all product reviews by a specific customer
// GET /reviews/customer/:customerId/products
app.get("/reviews/customer/:customerId/products", reviewController.getCustomerProductReviews.bind(reviewController));

// Get all shop reviews by a specific customer
// GET /reviews/customer/:customerId/shops
app.get("/reviews/customer/:customerId/shops", reviewController.getCustomerShopReviews.bind(reviewController));

// ====================================
// UTILITY ROUTES (for debugging)
// ====================================

// Get all reviews (for debugging)
// GET /reviews/all
app.get("/reviews/all", async (c) => {
  try {
    const allReviews = await memoryDb.getAllReviews();
    return c.json({
      success: true,
      ...allReviews
    });
  } catch (error) {
    return c.json({ success: false, error: 'Failed to get all reviews' }, 500);
  }
});

// Clear all reviews (for testing)
// DELETE /reviews/all
app.delete("/reviews/all", async (c) => {
  try {
    await memoryDb.clearAllReviews();
    return c.json({
      success: true,
      message: 'All reviews cleared'
    });
  } catch (error) {
    return c.json({ success: false, error: 'Failed to clear reviews' }, 500);
  }
});

// ====================================
// LEGACY ROUTES (for backward compatibility)
// ====================================

// Legacy route - redirects to new product review route
app.get("/reviews/product_old/:productName", async (c) => {
  const productName = c.req.param('productName');
  const reviews = await memoryDb.getReviewsByProduct(productName);
  return c.json({ success: true, reviews });
});

// Legacy route - redirects to new customer routes
app.get("/reviews/customer_old/:customerEmail", async (c) => {
  const customerEmail = c.req.param('customerEmail');
  const productReviews = await memoryDb.getReviewsByUser(customerEmail);
  const shopReviews = await memoryDb.getShopReviewsByUser(customerEmail);
  return c.json({ 
    success: true, 
    productReviews, 
    shopReviews 
  });
});

// Legacy create review route - redirects to product review
app.post("/reviews/create_old", reviewController.createProductReview.bind(reviewController));
